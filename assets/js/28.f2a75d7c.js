(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{516:function(t,_,v){"use strict";v.r(_);var r=v(30),a=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"分布式理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式理论"}},[t._v("#")]),t._v(" 分布式理论")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200202201007.png",alt:"img"}})]),t._v(" "),v("h2",{attrs:{id:"_1-分布式特性和分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-分布式特性和分类"}},[t._v("#")]),t._v(" 1. 分布式特性和分类")]),t._v(" "),v("h3",{attrs:{id:"_1-1-分布式特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-分布式特性"}},[t._v("#")]),t._v(" 1.1. 分布式特性")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("性能")]),t._v("：用于衡量一个系统处理各种任务的能力。\n"),v("ul",[v("li",[v("strong",[t._v("吞吐量")]),t._v("：系统在一定时间内可以处理的任务数。\n"),v("ul",[v("li",[v("strong",[t._v("QPS")]),t._v("，即每秒查询数")]),t._v(" "),v("li",[v("strong",[t._v("TPS")]),t._v("，即每秒事务数")])])]),t._v(" "),v("li",[v("strong",[t._v("响应时间")]),t._v("：系统响应一个请求或输入需要花费的时间。")])])]),t._v(" "),v("li",[v("strong",[t._v("可用性")]),t._v("：指的是系统在面对各种异常时可以正确提供服务的能力。系统的可用性可以用系统停止服务的时间与总的时间之比衡量。")]),t._v(" "),v("li",[v("strong",[t._v("可扩展性")]),t._v("：指的是分布式系统通过扩展集群机器规模提高系统性能 (吞吐、响应时间、 完成时间)、存储容量、计算能力的特性，是分布式系统的特有性质。")])]),t._v(" "),v("h3",{attrs:{id:"_1-2-分布式分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-分布式分类"}},[t._v("#")]),t._v(" 1.2. 分布式分类")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("分布式计算")]),t._v("：解决应用的分布式计算问题。基于分布式计算模式，包括批处理计算、离线计算、在线计算、融合计算等，根据应用类型构建高效智能的分布式计算框架。")]),t._v(" "),v("li",[v("strong",[t._v("分布式存储")]),t._v("：解决数据的分布式和多元化问题。包括分布式数据库、分布式文件系统、分布式缓存等，支持不同类型的数据的存储和管理。")]),t._v(" "),v("li",[v("strong",[t._v("分布式通信")]),t._v("：解决进程间的分布式通信问题。通过消息队列、远程调用等方式，实现简单高效的通信。")]),t._v(" "),v("li",[v("strong",[t._v("分布式资源管理")]),t._v("：解决资源的分布式和异构性问题。将 CPU、内存、IO 等物理资源虚拟化，新城逻辑资源池，以便统一管理。")])]),t._v(" "),v("h2",{attrs:{id:"_2-cap-定理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-cap-定理"}},[t._v("#")]),t._v(" 2. CAP 定理")]),t._v(" "),v("blockquote",[v("p",[t._v("CAP 定理是加州大学计算机科学家埃里克·布鲁尔提出来的猜想，后来被证明成为分布式计算领域公认的定理。")])]),t._v(" "),v("p",[v("strong",[t._v("CAP 定理")]),t._v("，指的是："),v("strong",[t._v("在一个分布式系统中， 最多只能同时满足其中两项")]),t._v("。")]),t._v(" "),v("img",{staticStyle:{width:"400px"},attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20211102191636.png"}}),t._v(" "),v("p",[t._v("CAP 就是取 Consistency、Availability、Partition Tolerance 的首字母而命名。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20211102180526.png",alt:"img"}})]),t._v(" "),v("ul",[v("li",[t._v("一致性（"),v("strong",[t._v("C")]),t._v("onsistency）：在任何给定时间，网络中的所有节点都具有完全相同（最近）的值。")]),t._v(" "),v("li",[t._v("可用性（"),v("strong",[t._v("A")]),t._v("vailability）：对网络的每个请求都会收到响应，但不能保证返回的数据是最新的。")]),t._v(" "),v("li",[t._v("分区容错性（"),v("strong",[t._v("P")]),t._v("artition Tolerance）：即使任意数量的节点出现故障，网络仍会继续运行。")])]),t._v(" "),v("h3",{attrs:{id:"_2-1-一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-一致性"}},[t._v("#")]),t._v(" 2.1. 一致性")]),t._v(" "),v("p",[t._v("一致性（Consistency）指的是"),v("strong",[t._v("多个数据副本是否能保持一致")]),t._v("的特性。")]),t._v(" "),v("p",[t._v("在一致性的条件下，分布式系统在执行写操作成功后，如果所有用户都能够读取到最新的值，该系统就被认为具有强一致性。")]),t._v(" "),v("p",[t._v("数据一致性又可以分为以下几点：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("强一致性")]),t._v(" - 数据更新操作结果和操作响应总是一致的，即操作响应通知更新失败，那么数据一定没有被更新，而不是处于不确定状态。")]),t._v(" "),v("li",[v("strong",[t._v("最终一致性")]),t._v(" - 即物理存储的数据可能是不一致的，终端用户访问到的数据可能也是不一致的，但系统经过一段时间的自我修复和修正，数据最终会达到一致。")])]),t._v(" "),v("p",[t._v("举例来说，某条记录是 v0，用户向 G1 发起一个写操作，将其改为 v1。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://www.wangbase.com/blogimg/asset/201807/bg2018071602.png",alt:"img"}})]),t._v(" "),v("p",[t._v("接下来，用户的读操作就会得到 v1。这就叫一致性。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://www.wangbase.com/blogimg/asset/201807/bg2018071603.png",alt:"img"}})]),t._v(" "),v("p",[t._v("问题是，用户有可能向 G2 发起读操作，由于 G2 的值没有发生变化，因此返回的是 v0。G1 和 G2 读操作的结果不一致，这就不满足一致性了。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://www.wangbase.com/blogimg/asset/201807/bg2018071604.png",alt:"img"}})]),t._v(" "),v("p",[t._v("为了让 G2 也能变为 v1，就要在 G1 写操作的时候，让 G1 向 G2 发送一条消息，要求 G2 也改成 v1。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://www.wangbase.com/blogimg/asset/201807/bg2018071605.png",alt:"img"}})]),t._v(" "),v("p",[t._v("这样的话，用户向 G2 发起读操作，也能得到 v1。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://www.wangbase.com/blogimg/asset/201807/bg2018071606.png",alt:"img"}})]),t._v(" "),v("h3",{attrs:{id:"_2-2-可用性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-可用性"}},[t._v("#")]),t._v(" 2.2. 可用性")]),t._v(" "),v("p",[t._v("可用性指"),v("strong",[t._v("分布式系统在面对各种异常时可以提供正常服务的能力")]),t._v("，可以用系统可用时间占总时间的比值来衡量，4 个 9 的可用性表示系统 "),v("code",[t._v("99.99%")]),t._v(" 的时间是可用的。")]),t._v(" "),v("p",[t._v("在可用性条件下，系统提供的服务一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。")]),t._v(" "),v("h3",{attrs:{id:"_2-3-分区容错性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-分区容错性"}},[t._v("#")]),t._v(" 2.3. 分区容错性")]),t._v(" "),v("p",[t._v("分区容错性（Partition Tolerance）指 "),v("strong",[t._v("分布式系统在遇到任何网络分区故障的时候，仍然需要能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障")]),t._v("。")]),t._v(" "),v("p",[t._v("在一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中，这就叫分区。")]),t._v(" "),v("p",[t._v("假设，某个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。")]),t._v(" "),v("p",[t._v("提高分区容错性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容错性就提高了。")]),t._v(" "),v("p",[t._v("然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。")]),t._v(" "),v("p",[t._v("总的来说就是，数据存在的节点越多，分区容错性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。")]),t._v(" "),v("p",[t._v("大多数分布式系统都分布在多个子网络，每个子网络就叫做一个区（Partition）。分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://www.wangbase.com/blogimg/asset/201807/bg2018071601.png",alt:"img"}})]),t._v(" "),v("p",[t._v("上图中，G1 和 G2 是两台跨区的服务器。G1 向 G2 发送一条消息，G2 可能无法收到。系统设计的时候，必须考虑到这种情况。")]),t._v(" "),v("p",[v("strong",[t._v("一般来说，分区容错无法避免")]),t._v("，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。")]),t._v(" "),v("h3",{attrs:{id:"_2-4-ap-or-cp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-ap-or-cp"}},[t._v("#")]),t._v(" 2.4. AP or CP")]),t._v(" "),v("p",[t._v("在分布式系统中，分区容错性必不可少，因为需要总是假设网络是不可靠的。因此，"),v("strong",[t._v("CAP 理论实际在是要在可用性和一致性之间做权衡")]),t._v("。")]),t._v(" "),v("p",[t._v("由于分布式数据存储（如区块链）的性质，分区容错性是一个既定的事实；网络中总会有失败/无法访问的节点（尤其是因为互联网的不稳定特性）。 CAP 定理指出，当存在 P（分区）时，必须在 C（一致性）或 A（可用性）之间进行选择。")]),t._v(" "),v("p",[t._v("（1）AP 模式")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("AP")]),t._v(" "),v("strong",[t._v("模式")]),t._v("：对网络的每个请求都会收到响应，即使网络由于网络分区故障而无法保证它是最新的。")])]),t._v(" "),v("p",[t._v("选择 "),v("strong",[t._v("AP")]),t._v(" "),v("strong",[t._v("模式")]),t._v("，实现了服务的高可用。用户访问系统的时候，都能得到响应数据，不会出现响应错误；但是，当出现分区故障时，相同的读操作，访问不同的节点，得到响应数据可能不一样。")]),t._v(" "),v("img",{staticStyle:{width:"500px"},attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20211102191819.png"}}),t._v(" "),v("p",[t._v("（2）CP 模式")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("CP")]),t._v(" "),v("strong",[t._v("模式")]),t._v("：如果由于网络分区（故障节点）而无法保证特定信息是最新的，则系统将返回错误或超时。")])]),t._v(" "),v("p",[t._v("选择 "),v("strong",[t._v("CP")]),t._v(" "),v("strong",[t._v("模式")]),t._v("，这样能够提供一部分的可用性。采用 CP 模型的分布式系统，一旦因为消息丢失、延迟过高发生了网络分区，就影响用户的体验和业务的可用性。因为为了防止数据不一致，集群将拒绝新数据的写入。")]),t._v(" "),v("img",{staticStyle:{width:"500px"},attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20211102191820.png"}}),t._v(" "),v("h2",{attrs:{id:"_3-base-定理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-base-定理"}},[t._v("#")]),t._v(" 3. BASE 定理")]),t._v(" "),v("h3",{attrs:{id:"_3-1-什么是-base-定理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是-base-定理"}},[t._v("#")]),t._v(" 3.1. 什么是 BASE 定理")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("BASE 定理是对 CAP 中一致性和可用性权衡的结果")]),t._v("。")])]),t._v(" "),v("p",[t._v("BASE 是 "),v("strong",[v("code",[t._v("基本可用（Basically Available）")])]),t._v("、"),v("strong",[v("code",[t._v("软状态（Soft State）")])]),t._v(" 和 "),v("strong",[v("code",[t._v("最终一致性（Eventually Consistent）")])]),t._v(" 三个短语的缩写。")]),t._v(" "),v("p",[t._v("BASE 理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。")]),t._v(" "),v("ul",[v("li",[t._v("**基本可用（Basically Available）**分布式系统在出现故障的时候，"),v("strong",[t._v("保证核心可用，允许损失部分可用性")]),t._v("。例如，电商在做促销时，为了保证购物系统的稳定性，部分消费者可能会被引导到一个降级的页面。")]),t._v(" "),v("li",[v("strong",[t._v("软状态（Soft State）"),v("strong",[t._v("指允许系统中的数据存在中间状态，并认为该中间状态不会影响系统整体可用性，即")]),t._v("允许系统不同节点的数据副本之间进行同步的过程存在延时")]),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("最终一致性（Eventually Consistent）"),v("strong",[t._v("强调的是")]),t._v("系统中所有的数据副本，在经过一段时间的同步后，最终能达到一致的状态")]),t._v("。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/design/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA-BASE.png",alt:"img"}})]),t._v(" "),v("h3",{attrs:{id:"_3-2-base-vs-acid"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-base-vs-acid"}},[t._v("#")]),t._v(" 3.2. BASE vs. ACID")]),t._v(" "),v("p",[t._v("BASE 的理论的"),v("strong",[t._v("核心思想")]),t._v("是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。")]),t._v(" "),v("p",[t._v("ACID 要求强一致性，通常运用在传统的数据库系统上。而 BASE 要求最终一致性，通过"),v("strong",[t._v("牺牲强一致性来达到可用性")]),t._v("，通常运用在大型分布式系统中。")]),t._v(" "),v("img",{staticStyle:{width:"640px"},attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20211102192406.png"}}),t._v(" "),v("p",[t._v("在实际的分布式场景中，不同业务单元和组件对一致性的要求是不同的，因此 ACID 和 BASE 往往会结合在一起使用。")]),t._v(" "),v("h2",{attrs:{id:"_4-错误的分布式假设"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-错误的分布式假设"}},[t._v("#")]),t._v(" 4. 错误的分布式假设")]),t._v(" "),v("blockquote",[v("p",[t._v("内容摘自 "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fallacies of Distributed Computing"),v("OutboundLink")],1)])]),t._v(" "),v("p",[t._v("随着时间的推移，每一条都会被证明是错误的，也都会导致严重的问题，以及痛苦的学习体验：")]),t._v(" "),v("ul",[v("li",[t._v("网络是稳定的")]),t._v(" "),v("li",[t._v("网络传输的延迟是零")]),t._v(" "),v("li",[t._v("网络的带宽是无穷大")]),t._v(" "),v("li",[t._v("网络是安全的")]),t._v(" "),v("li",[t._v("网络的拓扑不会改变")]),t._v(" "),v("li",[t._v("只有一个系统管理员")]),t._v(" "),v("li",[t._v("传输数据的成本为零")]),t._v(" "),v("li",[t._v("整个网络是同构的")])]),t._v(" "),v("p",[t._v("为什么我们要深刻地认识这 8 个错误？")]),t._v(" "),v("p",[t._v("是因为，这要我们清楚地认识到——"),v("strong",[t._v("在分布式系统中，错误是不可能避免的")]),t._v("。既然错误无可避免，那么，我们应该做的是，将容错也作为功能去实现。")]),t._v(" "),v("h2",{attrs:{id:"_5-拜占庭将军问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-拜占庭将军问题"}},[t._v("#")]),t._v(" 5. 拜占庭将军问题")]),t._v(" "),v("blockquote",[v("p",[t._v("拜占庭将军问题是由"),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%8E%B1%E6%96%AF%E5%88%A9%C2%B7%E5%85%B0%E6%B3%A2%E7%89%B9",target:"_blank",rel:"noopener noreferrer"}},[t._v("莱斯利·兰波特"),v("OutboundLink")],1),t._v("在其同名论文中提出的"),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式对等网络"),v("OutboundLink")],1),t._v("通信容错问题。")]),t._v(" "),v("p",[t._v("在"),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%A8%88%E7%AE%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式计算"),v("OutboundLink")],1),t._v("中，不同的节点通过通讯交换信息达成共识而按照同一套协作策略行动。但有时候，系统中的节点可能出错而发送错误的信息，用于传递信息的通讯网络也可能导致信息损坏，使得网络中不同的成员关于全体协作的策略得出不同结论，从而破坏系统一致性。拜占庭将军问题被认为是容错性问题中最难的问题类型之一。")])]),t._v(" "),v("h3",{attrs:{id:"_5-1-问题描述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-问题描述"}},[t._v("#")]),t._v(" 5.1. 问题描述")]),t._v(" "),v("p",[t._v("一群拜占庭将军各领一支军队共同围困一座城市。")]),t._v(" "),v("p",[t._v("为了简化问题，军队的行动策略只有两种："),v("strong",[t._v("进攻")]),t._v("（Attack，后面简称 A）或 "),v("strong",[t._v("撤退")]),t._v("（Retreat，后面简称 R）。如果这些军队不是统一进攻或撤退，就可能因兵力不足导致失败。因此，"),v("strong",[t._v("将军们通过投票来达成一致策略：同进或同退")]),t._v("。")]),t._v(" "),v("p",[t._v("因为将军们分别在城市的不同方位，所以他们只能"),v("strong",[t._v("通过信使互相联系")]),t._v("。在投票过程中，"),v("strong",[t._v("每位将军都将自己的投票信息（A 或 R）通知其他所有将军")]),t._v("，这样一来每位将军根据自己的投票和其他所有将军送来的信息就可以分析出共同的投票结果而决定行动策略。")]),t._v(" "),v("p",[t._v("这个抽象模型的问题在于："),v("strong",[t._v("将军中可能存在叛徒，他们不仅会发出误导性投票，还可能选择性地发送投票信息")]),t._v("。")]),t._v(" "),v("p",[t._v("由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。而即使在保证所有将军忠诚的情况下，也不能排除信使被敌人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。")]),t._v(" "),v("p",[t._v("假使那些忠诚（或是没有出错）的将军仍然能通过多数决定来决定他们的战略，便称达到了拜占庭容错。在此，票都会有一个默认值，若消息（票）没有被收到，则使用此默认值来投票。")]),t._v(" "),v("p",[t._v("上述的故事可以映射到分布式系统中，"),v("em",[t._v("将军代表分布式系统中的节点；信使代表通信系统；叛徒代表故障或异常")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20210704104211.png",alt:"img"}})]),t._v(" "),v("h3",{attrs:{id:"_5-2-问题分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-问题分析"}},[t._v("#")]),t._v(" 5.2. 问题分析")]),t._v(" "),v("blockquote",[v("p",[t._v("兰伯特针对拜占庭将军问题，给出了两个解决方案：口头协议和书面协议。")]),t._v(" "),v("p",[t._v("本文介绍一下口头协议。")])]),t._v(" "),v("p",[t._v("在口头协议中，拜占庭将军问题被简化为"),v("strong",[t._v("将军 - 副官")]),t._v("模型，其核心规则如下：")]),t._v(" "),v("ul",[v("li",[t._v("忠诚的副官遵守同一命令。")]),t._v(" "),v("li",[t._v("若将军是忠诚的，所有忠诚的副官都执行他的命令。")]),t._v(" "),v("li",[v("strong",[t._v("如果叛徒人数为 m，将军人数不能少于 3m + 1")]),t._v(" ，那么拜占庭将军问题就能解决了。")])]),t._v(" "),v("p",[v("strong",[t._v("示例一、叛徒人数为 1，将军人数为 3")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20210704112012.png",alt:"img"}})]),t._v(" "),v("p",[t._v("这个示例中，将军人数不满足 3m + 1，无法保证忠诚的副官都执行将军的命令。")]),t._v(" "),v("p",[v("strong",[t._v("示例二、叛徒人数为 1，将军人数为 4")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20210704194815.png",alt:"img"}})]),t._v(" "),v("p",[t._v("这个示例中，将军人数满足 3m + 1，无论是副官中有叛徒，还是将军是叛徒，都能保证忠诚的副官执行将军的命令。")]),t._v(" "),v("h2",{attrs:{id:"_6-参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-参考资料"}},[t._v("#")]),t._v(" 6. 参考资料")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wiki - 拜占庭将军问题"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.bilibili.com/video/av78588312/",target:"_blank",rel:"noopener noreferrer"}},[t._v("拜占庭将军问题视频讲解"),v("OutboundLink")],1),t._v(" - 李永乐老师讲解的通俗易懂")]),t._v(" "),v("li",[v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fallacies of Distributed Computing"),v("OutboundLink")],1),t._v(" - 分布式系统新手常犯的 8 个错误，并探讨了其会带来的影响。")]),t._v(" "),v("li",[v("a",{attrs:{href:"http://book.mixu.net/distsys/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Distributed Systems for Fun and Profit"),v("OutboundLink")],1),t._v(" - 一本学习小册，涵盖了分布式系统中的关键问题，包括时间的作用和不同的复制策略。")]),t._v(" "),v("li",[v("a",{attrs:{href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.41.7628&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Note on Distributed Systems"),v("OutboundLink")],1),t._v(" - 这是一篇经典的论文，讲述了为什么在分布式系统中，远程交互不能像本地对象那样进行。")]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amazon’s Highly Available Key-value Store"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://cryptographics.info/cryptographics/blockchain/cap-theorem/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAP Theorem"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.semanticscholar.org/paper/CAP-twelve-years-later%3A-How-the-%22rules%22-have-Brewer/c9c73f5a1668b8bf12aae2efb6ac5a5a2c34002a",target:"_blank",rel:"noopener noreferrer"}},[t._v('CAP twelve years later: How the "rules" have changed'),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/07/cap.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAP 定理的含义"),v("OutboundLink")],1),t._v(" - by 阮一峰")]),t._v(" "),v("li",[v("a",{attrs:{href:"https://juejin.im/post/5d720e86f265da03cc08de74",target:"_blank",rel:"noopener noreferrer"}},[t._v("神一样的 CAP 理论被应用在何方"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://queue.acm.org/detail.cfm?id=1394128",target:"_blank",rel:"noopener noreferrer"}},[t._v("BASE: An Acid Alternative"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=a.exports}}]);